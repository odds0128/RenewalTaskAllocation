@startuml
/'
各種マネージャはSingletonにする
'/

GeneralManager  -up-> ConstantManager
GeneralManager ...> OutPutManager: <<call>>

class ConstantManager{
    ENVIRONMENTAL_CONSTANCE
}

class GeneralManager{
    initiateAgents()
    initiateTaskQueue()
}

class OutPutManager <<(S, #FF7700) Singleton>>{
    +aggregateData()
    +writeCSV()
}

package Agents {
    AgentManager   -up-> OutPutManager
    AgentManager ..> Agent : <<use>>
    GeneralManager ..> AgentManager: <<call>>
    Leader -up-> Role
    Member -up-> Role
    Agent ..> Role

    class AgentManager <<(S, #FF7700) Singleton>>{
        +agents: List<Agent>
        -leaderNum: int
        -memberNum: int
        +coordinates: HashMap
        +initiateAgents(int AgentNum)
        -generateAgents(int AgentNum)
        -calculateDelay(int fromID, int toID)
    }
    class Agent{
        +id:   int
        +roleType: enum
        -roleElements: Role[]
        -resources: List<Integer>
        -strategy  : Strategy
        -mailbox: List<Message>
        -selectRole()
        -sendMassage()
        -inactivate()
    }
    interface Role{
        e_leader: double
        e_member: double
    }
    class Leader{
        candidates: List<Agent>
        colleagues: List<Agent>
        assignedTask: Task
        DE_leader:  double[]
    }
    class Member{
        leader: Agent
        assignedSubtask: Subtask
        DE_member: double[]
    }

    enum RoleName{
        Leader
        Member
    }

    enum LeaderPhase{
        act1
        act2
    }

    enum MemberPhase{
        act1
        act2
        act3
    }

}

/'
 packageの単位でStrategyを実装していく
'/
package Strategies.strategyX{
    AgentManager .down.> Strategy  : <<use>>
    StrategyX_Leader -up-> Strategy
    StrategyX_Member -up-> Strategy
    interface Strategy {
    }
    class StrategyX_Leader{
        act1()
        act2()
    }
    class StrategyX_Member{
        act1()
        act2()
        act3()
    }
    enum StrategyName{
            StrategyX
            StrategyY
        }
}

package Messages{
    MessageManager -up-> OutPutManager
    MessageManager -> AgentManager
    AgentManager --> MessageManager

    MessageManager ..>Message: <<use>>

    class MessageManager <<(S, #FF7700) Singleton>>{
        DeliveryQueue: HashMap<Message, int>
        sendMessage(Message m, int untilDelivery):void
        deliverMessage():void
    }
    class Message{
        -subtask   : Subtask
        -restDelay : int
        -from: Agent
        -to  : Agent
    }
}


package Tasks{
    TaskManager -up-> OutPutManager
    GeneralManager ..> TaskManager: <<call>>
    TaskManager  ..> Task  : <<use>>
    AgentManager -> TaskManager

    Task "1" *-- "1..*"Subtask
    class TaskManager <<(S, #FF7700) Singleton>>{
        -List<Task> TaskQueue
        +generateTasks()
        +assignTask()
        /'
          AgentManagerはここのdisposeTaskやfinishTaskを呼ぶが，
          そのさらに中からOutPutManagerを読んで集計するようにする
        '/
        +disposeTask()
        +finishTask()
    }
    class Task{
        +id: int
        +contents: List<Subtask>
        ~generateSubtasks()
    }

    class Subtask{
        +id: int
        -requiredResourceType: int
        -requiredResourceSize: int
        +getReqResType(): int
        +getReqResSize(): int
    }
}


@enduml